#!/bin/bash
# @configure_input@

# run_test_suite
#
# Copyright (C) 2013,2016 by Swiss Library for the Blind, Visually Impaired and Print Disabled 
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the Lesser or Library GNU General Public License as
# published by the Free Software Foundation; either version 3, or (at
# your option) any later version.

# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the Library
# GNU General Public License for more details.

# You should have received a copy of the Library GNU General Public
# License along with this program; see the file COPYING.  If not, write
# to the Free Software Foundation, 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

verbose=1
colors=1

echo "--------------------------------------------------------------------------------"
echo "TESTS"
echo "--------------------------------------------------------------------------------"

tests=0
tests_error=0
tests_pass=0
tests_fail=0
tests_xfail=0
tests_xpass=0

TESTS_DIR=@abs_top_srcdir@/tests
cd "$TESTS_DIR"

# Create a temporary directory $tmp_dir in $TMPDIR (default /tmp).
: ${TMPDIR=/tmp}
{
    tmp_dir=`(umask 077 && mktemp -d "$TMPDIR/fooXXXXXX") 2>/dev/null` && test -d "$tmp_dir"
} || exit $?

run_single_test () {
	input=$1
	styles=$2
	expected=$3
	xfail=$4
	tests=$(( tests + 1 ))
	cmd="file2brl -w $tmp_dir -f $styles $input $tmp_dir/output.txt"
	echo "$cmd"
	eval "$cmd"
	if [ $? -ne 0 ]; then
		tests_error=$(( tests_error + 1 ))
		if [ $colors -ne 0 ]; then
			echo "   \033[1m\033[91mERROR\033[0m\033[0m"
		else
			echo "   ERROR"
		fi
	else
		diff -q $expected $tmp_dir/output.txt >/dev/null
		if [ $? -ne 0 ]; then
			if [ -e $xfail ]; then
				tests_xfail=$(( tests_xfail + 1 ))
				if [ $colors -ne 0 ]; then
					echo "   \033[1m\033[93mXFAIL\033[0m\033[0m"
				else
					echo "   XFAIL"
				fi
			else
				tests_fail=$(( tests_fail + 1 ))
				echo "Actual output:" >&2
				cat $tmp_dir/output.txt >&2
				if [ $colors -ne 0 ]; then
					echo "   \033[1m\033[91mFAIL\033[0m\033[0m"
				else
					echo "   FAIL"
				fi
			fi
		else
			if [ -e $xfail ]; then
				tests_xpass=$(( tests_xpass + 1 ))
				if [ $colors -ne 0 ]; then
					echo "   \033[1m\033[91mXPASS\033[0m\033[0m"
				else
					echo "   XPASS"
				fi
			else
				tests_pass=$(( tests_pass + 1 ))
				rm $tmp_dir/output.txt
				if [ $colors -ne 0 ]; then
					echo "   \033[1m\033[92mPASS\033[0m\033[0m"
				else
					echo "   PASS"
				fi
			fi
		fi
	fi
	rm -f file2brl.temp
	rm -rf $tmp
}

for test_dir in $TESTS_DIR/test_suite/test_* ; do
	cd "$test_dir"
	echo `pwd` >&2
	if test -n "$(find . -type d -maxdepth 1 -name 'test_*' -print -quit)"; then
		echo "Running $(basename $test_dir)/*..."
		if [ -e README -a $verbose -ne 0 ]; then
			echo "$(cat README | fold -sw 77 | sed 's/.*/	 &/' )"
		fi
		for test_sub_dir in test_* ; do
			if [ -e "$test_sub_dir/liblouisutdml.ini" ]; then
				cd "$test_sub_dir"
				echo `pwd` >&2
				README=README
				input=input.xml
				styles=./styles.cfg
				expected=expected.txt
				xfail=xfail
				if ! [ -e "$input" ]; then
					input=../input.xml
					if ! [ -e "$input" ]; then
						echo "input.xml missing" >&2
						exit 1
					fi
				fi
				if ! [ -e "$styles" ]; then
					styles=../styles.cfg
					if ! [ -e "$styles" ]; then
						echo "styles.cfg missing" >&2
						exit 1
					fi
				fi
				if ! [ -e "$expected" ]; then
					expected=../expected.txt
					if ! [ -e "$expected" ]; then
						echo "expected.txt missing" >&2
						exit 1
					fi
				fi
			elif [ -e liblouisutdml.ini ]; then
				README="$test_sub_dir/README"
				input="$test_sub_dir/input.xml"
				styles="$test_sub_dir/styles.cfg"
				expected="$test_sub_dir/expected.txt"
				xfail="$test_sub_dir/xfail"
				if ! [ -e "$input" ]; then
					input=input.xml
					if ! [ -e "$input" ]; then
						echo "input.xml missing" >&2
						exit 1
					fi
				fi
				if ! [ -e "$styles" ]; then
					styles=./styles.cfg
					if ! [ -e "$styles" ]; then
						echo "styles.cfg missing" >&2
						exit 1
					fi
				fi
				if ! [ -e "$expected" ]; then
					expected=expected.txt
					if ! [ -e "$expected" ]; then
						echo "expected.txt missing" >&2
						exit 1
					fi
				fi
			else
				cd "$test_sub_dir"
				echo `pwd` >&2
				echo "liblouisutdml.ini missing" >&2
				exit 1
			fi
			echo "Running $(basename $test_dir)/$test_sub_dir..."
			if [ -e "$README" -a $verbose -ne 0 ]; then
				echo "$(cat $README | fold -sw 77 | sed 's/.*/	 &/' )"
			fi
			run_single_test "$input" "$styles" "$expected" "$xfail"
		done
	else
		if ! [ -e input.xml ]; then
			echo "input.xml missing" >&2
			exit 1
		fi
		if ! [ -e styles.cfg ]; then
			echo "styles.cfg missing" >&2
			exit 1
		fi
		if ! [ -e expected.txt ]; then
			echo "expected.txt missing" >&2
			exit 1
		fi
		echo "Running $(basename $test_dir)..."
		if [ -e README -a $verbose -ne 0 ]; then
			echo "$(cat README | fold -sw 77 | sed 's/.*/	 &/' )"
		fi
		run_single_test input.xml ./styles.cfg expected.txt xfail
	fi
done

echo ""
echo "Summary:"
echo "--------"
echo "Tests run: $tests, Failures: $((tests_fail + tests_xpass)), Expected failures: $tests_xfail, Errors: $tests_error"
echo ""

[ $(( tests_error + tests_fail + tests_xpass )) -gt 0 ] && exit 1
exit 0
